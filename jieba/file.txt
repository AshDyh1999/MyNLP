矩形的长度（Length）与宽度（Breadth）存储在以各自名称命名的变量中。我们使用它们并
借助表达式来计算矩形的面积（Area）与周长（Perimeter）。我们将表达式 length *
breadth 的结果存储在变量 area 中并将其通过使用 print 函数打印出来。在第二种情况
中，我们直接在 print 函数中使用了表达式 2 * (length + breadth) 的值。
同时，你需要注意到 Python是如何漂亮地打印出 输出结果的。尽管我们没有特别在 Area
is 和变量 area 之间指定空格，Python 会帮我们加上所以我们就能得到一个整洁的输出结
果，同时程序也因为这样的处理方式而变得更加易读（因为我们不需要在用以输出的字符串
中考虑空格问题）。这便是一个 Python 是如何让程序员的生活变得更加便捷美好的范例。
总结
我们已经了解了如何使用运算符、操作数与表达式——这些是我们构建任何程序的基本块。
接下来，我们将看到如何在程序中善加利用这些语句。
. 按位与是针对二进制数的操作，指将两个二进制数的每一位都进行比较，如果两个相
应的二进位都为 1 则此位为 1，否则为 0。在本例中， 5 的二进制表达为 101 ， 3 的
二进制表达为 11 （为补全位数进行按位操作写作 011 ），则按位与操作后的结果为
001 ，对应的十进制数为 1 。 ↩
. 按位或是针对二进制数的操作，指将两个二进制数的每一位都进行比较，如果两个相
应的二进位有一个为 1 则此位为 1，否则为 0。在本例中， 101 与 011 进行按位或操
作后的结果为 111 ，对应十进制数为 7 。 ↩
. 按位异或是针对二进制数的操作，指将两个二进制数的每一位都进行比较，如果两个
相应的二进位不同则此位为 1，相同为 0。在本例中， 101 与 011 进行按位异或操作
的结果为 110 ，对应十进制数为 6 。 ↩
. 按位取反也称作“按位取非”或“求非”或“取反”，沈洁元译本译作“按位翻转”，是针对二进
制数的操作，指将两个二进制数的每一二进位都进行取反操作， 0 换成 1 ， 1 换成
0 。受篇幅与学识所限，本例具体原理不在此处赘述。读者只需按照给出的公式记忆即
可。

它是如何工作的
在这个程序中，我们根据用户猜测的数字来检查这一数字是否是我们所设置的。我们将变量
number 设为任何我们所希望的整数，例如 23 。然后，我们通过 input() 函数来获取用户
的猜测数。所谓函数是一种可重复使用的程序。我们将在下一章详细讨论它。
我们为内置的 input 函数提供一串打印到屏幕上的字符串并等待用户的输入。一旦我们输入
了某些内容并按下键盘上的 enter 键， input() 函数将以字符串的形式返回我们所输入的
内容。然后我们通过 int 将这个字符串转换成一个整数并将其储存在变量 guess 中。实际
上， int 是一个类（Class），但你现在你所需要知道的就是你可以使用它将一串字符串转
换成一个整数（假设这个字符串的文本中含有一个有效的整数）。
接下来，我们将用户提供的猜测数与我们所选择的数字进行对比。如果它们相等，我们就打
印一条成功信息。在这里要注意到我们使用缩进级别来告诉 Python 哪些语句分别属于哪个
块。这便是为什么在 Python 中缩进如此重要。我希望你能够坚持“缩进一致”的原则，你能做
到吧？
另外需要注意的是 if 语句在结尾处包含一个冒号——我们借此向 Python 指定接下来会有
一块语句在后头。
然后，我们检查猜测数是否小于我们选择的数字，如果是，我们将告诉用户他们必须猜一个
更高一些的数字。在这里我们使用的是 elif 语句，它们实际上将两个相连的 if else-if
else 语句合并成一句 if-elif-else 语句。这能够使程序更加简便，并且可以减少所需要的
缩进量。
elif 和 else 同样都必须有一个冒号在其逻辑行的末尾，后面跟着与它们相应的语句块
（当然，别忘了恰当的缩进）。
你可以在 if 块的 一个 if 语句中设置另一个 if 语句，并可以如此进行下去——这被称作
嵌套的 if 语句。
